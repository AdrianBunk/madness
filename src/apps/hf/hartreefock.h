//#ifndef HARTREEFOCK_H_
//#define HARTREEFOCK_H_

#include <mra/mra.h>
#include <world/world.h>
#include <vector>

namespace madness
{
    
  //***************************************************************************
  // TYPEDEFS
  typedef SharedPtr< FunctionFunctorInterface<double,3> > functorT;
  typedef Function<double,3> funcT;
  typedef Vector<double,3> coordT;
  //***************************************************************************

//  //***************************************************************************
//  class Ones
//  {
//  public:
//    
//    //*************************************************************************
//    Ones(World& world) : _world(world) {}
//    //*************************************************************************
//    
//    //*************************************************************************
//    funcT operator()()
//    {
//      functorT functor(new OnesFunctor());
//      funcT f = FunctionFactory<double,3>(_world).functor(functor);
//      return f;
//    }
//    //*************************************************************************
//    ones
//  private:
//    
//    //***************************************************************************
//    class OnesFunctor :
//    public FunctionFunctorInterface<double,3>
//    {
//    private:
//    
//    public:
//      //*************************************************************************
//      OnesFunctor()
//      {
//      }
//      //*************************************************************************
//    
//      //*************************************************************************
//      virtual ~OnesFunctor() {}
//      //*************************************************************************
//
//      //*************************************************************************
//      double operator()(const coordT& x) const
//      {
//        return 1.0;
//      }
//      //*************************************************************************
//    };
//    //***************************************************************************
//
//    //*************************************************************************
//    World& _world;
//    //*************************************************************************
//  };
//  //***************************************************************************
//
//  //***************************************************************************
//  class Zeros
//  {
//  public:
//    
//    //*************************************************************************
//    Zeros(World& world) : _world(world) {}
//    //*************************************************************************
//    
//    //*************************************************************************
//    funcT operator()()
//    {
//      functorT functor(new ZerosFunctor());
//      funcT f = FunctionFactory<double,3>(_world).functor(functor);
//      return f;
//    }
//    //*************************************************************************
//    
//  private:
//    
//    //***************************************************************************
//    class ZerosFunctor :
//    public FunctionFunctorInterface<double,3>
//    {
//    private:
//    
//    public:
//      //*************************************************************************
//      ZerosFunctor()
//      {
//      }
//      //*************************************************************************
//    
//      //*************************************************************************
//      virtual ~ZerosFunctor() {}
//      //*************************************************************************
//
//      //*************************************************************************
//      double operator()(const coordT& x) const
//      {
//        return 0.0;
//      }
//      //*************************************************************************
//    };
//    //***************************************************************************
//
//    //*************************************************************************
//    World& _world;
//    //*************************************************************************
//  };
//  //***************************************************************************

  class OnesFunctor :
  public FunctionFunctorInterface<double,3>
  {
  private:
  
  public:
    //*************************************************************************
    OnesFunctor()
    {
    }
    //*************************************************************************
  
    //*************************************************************************
    virtual ~OnesFunctor() {}
    //*************************************************************************
  
    //*************************************************************************
    double operator()(const coordT& x) const
    {
      return 1.0;
    }
    //*************************************************************************
  };

  //***************************************************************************
  class ZerosFunctor :
  public FunctionFunctorInterface<double,3>
  {
  private:
  
  public:
    //*************************************************************************
    ZerosFunctor()
    {
    }
    //*************************************************************************
  
    //*************************************************************************
    virtual ~ZerosFunctor() {}
    //*************************************************************************

    //*************************************************************************
    double operator()(const coordT& x) const
    {
      return 0.0;
    }
    //*************************************************************************
  };
  //***************************************************************************

  //***************************************************************************
  class HartreeFock
  {
  public:
  
    //*************************************************************************
    // Constructor
    HartreeFock(World& world, funcT V, std::vector<funcT> phis);
    //*************************************************************************
  
    //*************************************************************************
    // Destructor
  	virtual ~HartreeFock();
    //*************************************************************************
  
    //*************************************************************************
  	void hartree_fock(int maxits);
    //*************************************************************************
  
    //*************************************************************************
    funcT calculate_coulomb(funcT psi);
    //*************************************************************************

    //*************************************************************************
    funcT calculate_exchange(funcT psi);
    //*************************************************************************

    //*************************************************************************
    bool include_coulomb()
    {
      return _bCoulomb;
    }
    //*************************************************************************

    //*************************************************************************
    bool include_exchange()
    {
      return _bExchange;
    }
    //*************************************************************************

private:

    //*************************************************************************
    // One body potential
    funcT _V;
    //*************************************************************************
    
    //*************************************************************************
    // List of the single particle wavefunctions
    std::vector<funcT> _phis;
    //*************************************************************************

    //*************************************************************************
    // List of the hartree fock eigenvalues
    std::vector<double> _eigs;
    //*************************************************************************

    //*************************************************************************
    // Flags for whether to include the coulomb and exchange
    bool _bCoulomb;
    bool _bExchange;
    //*************************************************************************

    //*************************************************************************
    World& _world;
    //*************************************************************************

    //*************************************************************************
    functorT ones;
    functorT zeros;
    //*************************************************************************
  
  };
  //***************************************************************************

}

//#endif /*HARTREEFOCK_H_*/

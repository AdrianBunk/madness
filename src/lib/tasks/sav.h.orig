#ifndef SAV_H_
#define SAV_H_

/// \file sav.h
/// \brief Basic functionality for single assignment variables

#include <misc/shared_ptr.h>

class BaseSAVImpl{
private:
  bool assigned; ///< True/false if assigned or not

protected:
  
public:
  BaseSAVImpl() : assigned(false) {};
  
  BaseSAVImpl(bool value) : assigned(value) {};
  


  
  // virtual ~BaseSAVImpl() {};
};


template <typename T>
class SAVImpl {
private:
  bool assigned();
  T t;  ///< The actual value

protected:
  /// Friends may need to assign via a pointer
  inline T* get_ptr() {return &t;};

  /// Friends assigning via a pointer will need to mark assignment
  
  /// This also calls assign action
  inline void set_assigned() {
  		assigned = true; 
  		assign_action();
  };

  /// Reset ... is necessary in some scenarios?
  inline void reset() {assigned = false;};

public:
  /// Default constructor is an unassigned variable
  SAVImpl()
    : assigned(false)
    , t()
  {}

  /// Constructor assigning from value
  SAVImpl(const T& t)
    : assigned(true)
    , t(t)
  {};

  /// Probe returns true if assigned & must not block
  virtual bool probe() const {    // Logically const ...
  	if (!assigned) probe_action();
    return assigned;
  };
  
  /// Get const reference to the value ... throws exception if not assigned
  inline const T& get() const {
    if (!probe()) throw "SAV: trying to get unassigned SAV";
    return t;
  };

  /// Set the value ... throws exception if assigned
  inline void set(const T& value) {
  	if (probe())  throw "SAV: trying to set assigned SAV";
    t = value;
    set_assgined();
  };
  
  /// Override this to have an action performed at assignment
  virtual void assign_action() {};
  
  /// Override this to have an action performed at probe
  virtual void probe_action() {};

  // virtual ~SAVImpl() {};
};

template <class T>
class SAV {
private:
  SharedPtr< SAVImpl<T> > p;
  
public:
  SAV() : p(new SAVImpl<T>()) {};
  
  SAV(const T& t) : p(new SAVImpl<T>(t)) {};
  
  inline void set(const T& value) {p->set(value);};
  
  inline const T& get() const {return p->get();};
  
  inline bool probe() const {return p->probe();};
};


#endif /*SAV_H_*/
